/*
 * @lc app=leetcode.cn id=find-the-winner-of-the-circular-game lang=golang
 *
 * NOTE (beewangruichao): I cannot use fid, thus I use slug instead.
 *
 * [1823] 找出游戏的获胜者
 *
 * https://leetcode-cn.com/problems/find-the-winner-of-the-circular-game/description/
 *
 * algorithms
 * Medium (72.97%)
 * Total Accepted:    25.2K
 * Total Submissions: 32.6K
 * Testcase Example:  '5\n2'
 *
 * 共有 n 名小伙伴一起做游戏。小伙伴们围成一圈，按 顺时针顺序 从 1 到 n 编号。确切地说，从第 i 名小伙伴顺时针移动一位会到达第 (i+1)
 * 名小伙伴的位置，其中 1  ，从第 n 名小伙伴顺时针移动一位会回到第 1 名小伙伴的位置。
 *
 * 游戏遵循如下规则：
 *
 *
 * 从第 1 名小伙伴所在位置 开始 。
 * 沿着顺时针方向数 k 名小伙伴，计数时需要 包含 起始时的那位小伙伴。逐个绕圈进行计数，一些小伙伴可能会被数过不止一次。
 * 你数到的最后一名小伙伴需要离开圈子，并视作输掉游戏。
 * 如果圈子中仍然有不止一名小伙伴，从刚刚输掉的小伙伴的 顺时针下一位 小伙伴 开始，回到步骤 2 继续执行。
 * 否则，圈子中最后一名小伙伴赢得游戏。
 *
 *
 * 给你参与游戏的小伙伴总数 n ，和一个整数 k ，返回游戏的获胜者。
 *
 *
 *
 * 示例 1：
 *
 *
 * 输入：n = 5, k = 2
 * 输出：3
 * 解释：游戏运行步骤如下：
 * 1) 从小伙伴 1 开始。
 * 2) 顺时针数 2 名小伙伴，也就是小伙伴 1 和 2 。
 * 3) 小伙伴 2 离开圈子。下一次从小伙伴 3 开始。
 * 4) 顺时针数 2 名小伙伴，也就是小伙伴 3 和 4 。
 * 5) 小伙伴 4 离开圈子。下一次从小伙伴 5 开始。
 * 6) 顺时针数 2 名小伙伴，也就是小伙伴 5 和 1 。
 * 7) 小伙伴 1 离开圈子。下一次从小伙伴 3 开始。
 * 8) 顺时针数 2 名小伙伴，也就是小伙伴 3 和 5 。
 * 9) 小伙伴 5 离开圈子。只剩下小伙伴 3 。所以小伙伴 3 是游戏的获胜者。
 *
 * 示例 2：
 *
 *
 * 输入：n = 6, k = 5
 * 输出：1
 * 解释：小伙伴离开圈子的顺序：5、4、6、2、3 。小伙伴 1 是游戏的获胜者。
 *
 *
 *
 *
 * 提示：
 *
 *
 * 1 <= k <= n <= 500
 *
 *
 */

/*
 * // 约瑟夫环经典题, 我直接模拟+队列
 * func findTheWinner(n int, k int) int {
 * 	// assert n > 0 && k > 0
 * 	Q := make([]int, 0, n*2)
 * 	for i := 1; i <= n; i++ {
 * 		Q = append(Q, i)
 * 	}
 * 	for len(Q) > 1 {
 * 		for i := 0; i < (k-1)%len(Q); i++ {
 * 			v := Q[0]
 * 			Q = Q[1:]
 * 			Q = append(Q, v)
 * 		}
 * 		Q = Q[1:]
 * 	}
 * 	return Q[0]
 * }
 */

// 可以考虑递归求解:
//
// - 奠基: 问题规模为 `1` 时直接返回该值 (环里只有约瑟夫了);
// - 归纳: 根据 `n-1` 个人中的获胜者求 `n` 个人中的获胜者. 可以发现 `n` 个人中的编号对 `n-1` 中的编号存在映射关系:
//   由于 `k % n` 号出局了, 所以 `{(k + 1) % n}_n` 对应 `{1}_(n-1)`, 以此类推. 也即 `{i}_(n-1)` 对应 `{(k + i) % n}_n`. 就得到了递推关系.
func findTheWinner(n int, k int) int {
	if n <= 1 {
		return n
	}
	ans := (findTheWinner(n-1, k) + k) % n
	if ans == 0 {
		return n
	}
	return ans
}
